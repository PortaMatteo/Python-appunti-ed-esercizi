{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "Usq4gEkhrJfu",
        "h5bQvJF_rFIy",
        "JZbhhxb8rAl6",
        "cnK1gE29q8Jk"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# IMC/WHR"
      ],
      "metadata": {
        "id": "Usq4gEkhrJfu"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZW9CmKA949bG",
        "outputId": "718ca6e5-24ce-4620-b71c-b098c6d71451"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "22.11584222166233\n",
            "1.0\n",
            "0\n",
            "0\n"
          ]
        }
      ],
      "source": [
        "from IPython.core.error import UsageError\n",
        "# classe: collezione di oggetti che condividono le stesse caratteristiche (proprietà) e alla quale è possibile applicare gli stessi metodi \n",
        "# oggetto: istanza della classe \n",
        "\n",
        "class persona:\n",
        "    def __init__(self, peso, altezza, sesso, vita, fianchi):\n",
        "        \n",
        "        self.__peso = peso\n",
        "        self.__altezza = altezza\n",
        "        self.sesso = sesso\n",
        "        self.__vita = vita\n",
        "        self.__fianchi = fianchi\n",
        "    # Metodi set e get per accedere agli attributi \n",
        "    def get_altezza(self):\n",
        "      return self.__altezza\n",
        "\n",
        "    def set_altezza(self,altezza):\n",
        "      if altezza > 0:\n",
        "        self.__altezza = altezza\n",
        "        return 0 \n",
        "      else:\n",
        "        return -1\n",
        "\n",
        "    def get_peso(self):\n",
        "      return self.__peso\n",
        "            \n",
        "    def get_fianchi(self):\n",
        "      return self.__fianchi\n",
        "\n",
        "    def set_fianchi(self,altezza):\n",
        "      if altezza > 0:\n",
        "        self.__altezza = altezza\n",
        "        return 0 \n",
        "      else:\n",
        "        return -1\n",
        "\n",
        "    def get_vita(self):\n",
        "      return self.__vita\n",
        "\n",
        "    def set_vita(self,altezza):\n",
        "      if altezza > 0:\n",
        "        self.__altezza = altezza\n",
        "        return 0 \n",
        "      else:\n",
        "        return -1\n",
        "    \n",
        "    def imc(self):\n",
        "        altezza_m = self.get_altezza() / 100\n",
        "        imc = self.get_peso() / pow(altezza_m,2)\n",
        "        return imc\n",
        "\n",
        "    def whr(self):\n",
        "        return self.get_vita() / self.get_fianchi()\n",
        "\n",
        "    def valutazione(self):\n",
        "      if self.imc() < 20:\n",
        "        return -1  # Sottopeso\n",
        "      elif self.imc() >24:\n",
        "        return 1 # Sovrappeso\n",
        "      else:\n",
        "        return 0 # Normopeso\n",
        "\n",
        "\n",
        "# Creazione di un oggetto = istanza di una classe\n",
        "ugo = persona(79,189, \"m\", 90, 90)\n",
        "\n",
        "print(ugo.imc())\n",
        "print(ugo.whr())\n",
        "print(ugo.set_altezza(ugo.get_altezza() + 5 ))\n",
        "print(ugo.valutazione())"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Impiegato"
      ],
      "metadata": {
        "id": "h5bQvJF_rFIy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Crea una clase impiegato, che abbia gli attributi privati nome, cognome, anno assunzione, stipendio e i metodi cambia stipendio (che cambia lo stipendio dell'impiegato di una certa percentuale), il metodo calcola anzianità (che calcola quanti anni sono trascorsi dalla data di assunzione) e il metodo fornisci dettagli (che restituisca la lista contenente tutti gli attributi dell'impiegato)"
      ],
      "metadata": {
        "id": "48PyFcMDzcZX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class impiegato:\n",
        "  def __init__(self, nome, cognome, anno, stipendio):\n",
        "    self.__nome = nome\n",
        "    self.__cognome = cognome\n",
        "    self.__anno = anno\n",
        "    self.__stipendio = stipendio\n",
        "\n",
        "  def get_nome(self):\n",
        "    return self.__nome\n",
        "\n",
        "  def get_cognome(self):\n",
        "    return self.__cognome    \n",
        "\n",
        "  def get_anno(self):\n",
        "    return self.__anno\n",
        "\n",
        "  def get_stipendio(self):\n",
        "    return self.__stipendio\n",
        "\n",
        "  def cambia_sitpendio(self, percentuale):\n",
        "      if percentuale > 0:\n",
        "        self.__stipendio = self.get_stipendio() + ( self.get_stipendio() * percentuale / 100) \n",
        "        return self.__stipendio\n",
        "      else:\n",
        "        return 0\n",
        "\n",
        "  def calcolo_anzianita(self):\n",
        "    import datetime\n",
        "    return datetime.date.today().year - self.get_anno()\n",
        "\n",
        "  def dettagli(self):\n",
        "    return self.get_nome(), self.get_cognome(), self.get_anno(), self.get_stipendio()\n",
        "\n",
        "ugo = impiegato(\"Ugo\",\"Rossi\", 1998, 2000)\n",
        "print(ugo.cambia_sitpendio(10))\n",
        "print(ugo.calcolo_anzianita())\n",
        "print(ugo.dettagli())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mkh4Idt1z_j3",
        "outputId": "64774b1f-04f7-4f60-f8b3-51c827f5fbd0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2200.0\n",
            "25\n",
            "('Ugo', 'Rossi', 1998, 2200.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Studente\n"
      ],
      "metadata": {
        "id": "JZbhhxb8rAl6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creare una classe studente che ha degli attributi privati nome, cognome, classe, data di nascita, voti e i metodi cambia classe, aggiungi voto, calcola media, se è maggiorenne e passaggio classe successiva se è sufficiente in tutte le mateie. Scrivere poi un programma che inserisca uno studente e provi tutti i metodi "
      ],
      "metadata": {
        "id": "E5daxhYGAI6n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from traitlets.config.application import T\n",
        "class Studente:\n",
        "  def __init__(self, nome, cognome, classe, dataDiNascita, voti):\n",
        "    self.__nome = nome\n",
        "    self.__cognome = cognome\n",
        "    self.__classe = classe\n",
        "    self.__dataDiNascita = dataDiNascita\n",
        "    self.__voti = voti\n",
        "\n",
        "  def setNome(self,nome):\n",
        "    if type(nome) == str and len(nome) > 0:\n",
        "      self.__nome = nome\n",
        "      return 0 \n",
        "    else:\n",
        "      return -1\n",
        "  \n",
        "  def getNome(self):\n",
        "    return self.__nome\n",
        "\n",
        "  def setCognome(self,cognome): \n",
        "    if type(cognome) == str and len(cognome) > 0:\n",
        "      self.__cognome = cognome\n",
        "      return 0 \n",
        "    else:\n",
        "      return -1\n",
        "\n",
        "  def getCognome(self):\n",
        "    return self.__cognome\n",
        "\n",
        "  def setClasse(self,classe):\n",
        "    if classe < 0 and classe < 6:\n",
        "      self.__classe = classe\n",
        "      return 0 \n",
        "    else:\n",
        "      return -1\n",
        "\n",
        "  def getClasse(self): \n",
        "    return self.__classe\n",
        "\n",
        "  def setDataDiNascita(self, dataDiNascita):\n",
        "    from datetime import datetime\n",
        "    dataDiNascita = datetime.strptime(dataDiNascita, '%Y-%m-%d')\n",
        "    self.__dataDiNascita = dataDiNascita\n",
        "    return 0\n",
        "\n",
        "\n",
        "  def getDataDiNascita(self):\n",
        "    return self.__dataDiNascita\n",
        "\n",
        "  def setVoti(self,voti): \n",
        "    self.__voti = voti\n",
        "    return 0 \n",
        "\n",
        "  \n",
        "  def getVoti(self):\n",
        "    return self.__voti\n",
        "\n",
        "  def calcoloMedia(self):\n",
        "    import statistics\n",
        "    return statistics.mean(self.getVoti()) \n",
        "\n",
        "  def maggiorenne(self):\n",
        "    from datetime import datetime\n",
        "    data = datetime.strptime(datetime.now().strftime(\"%Y-%m-%d\"), \"%Y-%m-%d\")\n",
        "    diff = data - self.getDataDiNascita()\n",
        "    eta = diff.days  / 365\n",
        "    if eta >= 18: \n",
        "      return True\n",
        "    else:\n",
        "      return False\n",
        "  \n",
        "  def passaggioClasseSucc(self):\n",
        "    esito = True\n",
        "    for voto in self.getVoti():\n",
        "      if voto < 6:\n",
        "        esito = False\n",
        "    if esito == True:\n",
        "      classe = self.getClasse() + 1\n",
        "      return esito, classe\n",
        "    else: \n",
        "      return esito\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "alfio = Studente('Alfio', 'Song', 4, '2004-11-24', [])\n",
        "print(alfio.getNome())\n",
        "alfio.setVoti([6.0, 6.5,2.0,3.5])\n",
        "print(alfio.getVoti())\n",
        "print(alfio.calcoloMedia())\n",
        "print(alfio.passaggioClasseSucc())\n",
        "print(alfio.setDataDiNascita('2004-11-24'))\n",
        "print(alfio.getDataDiNascita())\n",
        "print(alfio.maggiorenne())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5AH-L4nR2Ctj",
        "outputId": "b4415404-914f-454d-edb9-2f572e932b77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alfio\n",
            "[6.0, 6.5, 2.0, 3.5]\n",
            "4.5\n",
            "False\n",
            "0\n",
            "2004-11-24 00:00:00\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Serbatoio"
      ],
      "metadata": {
        "id": "cnK1gE29q8Jk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Class Fuel:\n",
        "  def __init__(capacita, liquido):\n",
        "    self.__capacita = capacita\n",
        "    self.__liquido = liquido\n",
        "\n",
        "  def setLiquido(self, liquido):\n",
        "    if liquido < 0:\n",
        "      self.__liquido = 0\n",
        "      return -1 #troppo poco liquido\n",
        "    elif liquido > self.__capacita:\n",
        "      self.__liquido = self.__capacita\n",
        "      return 1 #troppo liquido\n",
        "    else:\n",
        "      self.__liquido = liquido\n",
        "      return 0 #tutto ok\n",
        "\n",
        "  def getLiquido(self):\n",
        "    return self.__liquido\n",
        "\n",
        "  def setCapacita(self, capacita):\n",
        "    self.__capacita = capacita\n",
        "    return 0\n",
        "\n",
        "  def getCapacita(self):\n",
        "    return self.__capacita\n",
        "\n",
        "  def aggiungiLiquido(self, quantita: float):\n",
        "    if self.getLiquido() + quantita > self.getCapacita():\n",
        "      self.setLiquido(self.getCapacita())\n",
        "      return  self.getLiquido() + quantita - self.getCapacita()\n",
        "    else:\n",
        "      self.setLiquido(self.getLiquido() + quantita) \n",
        "      return 0\n",
        "\n",
        "\n",
        "  def rimuoviLiquido(self, quantita: float):\n",
        "    if self.getLiquido() - quantita < 0:\n",
        "      self.setLiquido(0)\n",
        "      return  quantita - self.getLiquido()\n",
        "    else:\n",
        "      self.setLiquido(self.getLiquido() - quantita) \n",
        "      return 0\n"
      ],
      "metadata": {
        "id": "_gDVmE6dS6zs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Eredità"
      ],
      "metadata": {
        "id": "HLJBRNQGqz_v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Persona:\n",
        "\n",
        "    def __init__(self, nome, cognome, età, residenza):\n",
        "        self.nome = nome\n",
        "        self.cognome = cognome\n",
        "        self.età = età\n",
        "        self.residenza = residenza\n",
        "\n",
        "    def scheda_personale(self):\n",
        "        scheda = f\"\"\"\n",
        "        Nome: {self.nome}\n",
        "        Cognome: {self.cognome}\n",
        "        Età: {self.età}\n",
        "        Residenza: {self.residenza}\\n\"\"\"\n",
        "        return scheda\n",
        "\n",
        "    def modifica_scheda(self):\n",
        "        print(\"\"\"Modifica Scheda:\n",
        "        1 - Nome\n",
        "        2 - Cognome\n",
        "        3 - Età\n",
        "        4 - Residenza\"\"\")\n",
        "        scelta = input(\"Cosa Desideri modificare?\")\n",
        "        if scelta == \"1\":\n",
        "            self.nome = input(\"Nuovo Nome--> \")\n",
        "        elif scelta == \"2\":\n",
        "            self. cognome = input(\"Nuovo Cognome --> \")\n",
        "        elif scelta == \"3\":\n",
        "            self.età = int(input(\"Nuova età --> \"))\n",
        "        elif scelta == \"4\":\n",
        "            self.residenza = input(\"Nuova Residenza --> \")\n",
        "            \n",
        "class Studente(Persona):\n",
        "    pass\n",
        "\n",
        "class Insegnante(Persona):\n",
        "    pass\n",
        "\n",
        "studente_uno = Studente(\"Py\", \"Mike\", 24, \"Casa Dello Studente\")\n",
        "insegnante_uno = Insegnante(\"Mario\", \"Rossi\", 33, \"Viale Roma 32\")\n",
        "\n",
        "print(studente_uno.scheda_personale())\n",
        "print(insegnante_uno.scheda_personale())\n",
        "            "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SFvdazsCq4LS",
        "outputId": "50ed6d68-3499-4b81-ef3b-af6db56258eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "        Nome: Py\n",
            "        Cognome: Mike\n",
            "        Età: 24\n",
            "        Residenza: Casa Dello Studente\n",
            "\n",
            "\n",
            "        Nome: Mario\n",
            "        Cognome: Rossi\n",
            "        Età: 33\n",
            "        Residenza: Viale Roma 32\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class FiguraGeometrica:\n",
        "  def __init__(self,nome,d1,d2):\n",
        "    self.nome = nome\n",
        "    self.d1 = d1\n",
        "    self.d2 = d2\n",
        "\n",
        "  def Area(self):\n",
        "    if self.nome == 'rettangolo':\n",
        "      area = self.d1 * self.d2\n",
        "      return area \n",
        "    else:\n",
        "      if self.d1 < self.d2:\n",
        "        area = 3.14 * self.d1**2\n",
        "        return area \n",
        "      else:\n",
        "        area = 3.14 * self.d2**2\n",
        "        return area \n",
        "    \n",
        "  def Perimetro(self):\n",
        "    if self.nome == 'rettangolo':\n",
        "      perimetro = self.d1 * 2 + self.d2 * 2 \n",
        "      return perimetro\n",
        "    else: \n",
        "      if self.d1 < self.d2:\n",
        "        perimetro = 2 * 3.14 * self.d1\n",
        "        return perimetro  \n",
        "      else:\n",
        "        perimetro = 2 * 3.14 * self.d2\n",
        "        return perimetro \n",
        "\n",
        "class Rettangolo(FiguraGeometrica):\n",
        "    pass\n",
        "\n",
        "class Cerchio(FiguraGeometrica):\n",
        "    pass\n",
        "\n",
        "rettangolo = Rettangolo('rettangolo', 10, 5)\n",
        "cerchio = Cerchio('cerchio', 5, 10)\n",
        "\n",
        "print(\"Area rettangolo:\" , rettangolo.Area())\n",
        "print(\"Perimetro rettangolo:\" , rettangolo.Perimetro())\n",
        "\n",
        "print(\"Area cerchio:\" ,cerchio.Area())\n",
        "print(\"Perimetro cerhio:\" , cerchio.Perimetro())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NbLKAHGXsGAM",
        "outputId": "0bd96f33-8e0b-4e9d-d827-f744ec59a021"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area rettangolo: 50\n",
            "Perimetro rettangolo: 30\n",
            "Area cerchio: 78.5\n",
            "Perimetro cerhio: 31.400000000000002\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class FiguraGeometrica:\n",
        "  def __init__(self,nome,d1,d2):\n",
        "    self.nome = nome\n",
        "    self.d1 = d1\n",
        "    self.d2 = d2\n",
        "\n",
        "  def Area(self):\n",
        "    if self.nome == 'rettangolo':\n",
        "      area = self.d1 * self.d2\n",
        "      return area \n",
        "    else:\n",
        "      if self.d1 < self.d2:\n",
        "        area = 3.14 * self.d1**2\n",
        "        return area \n",
        "      else:\n",
        "        area = 3.14 * self.d2**2\n",
        "        return area \n",
        "    \n",
        "  def Perimetro(self):\n",
        "    if self.nome == 'rettangolo':\n",
        "      perimetro = self.d1 * 2 + self.d2 * 2 \n",
        "      return perimetro\n",
        "    else: \n",
        "      if self.d1 < self.d2:\n",
        "        perimetro = 2 * 3.14 * self.d1\n",
        "        return perimetro  \n",
        "      else:\n",
        "        perimetro = 2 * 3.14 * self.d2\n",
        "        return perimetro \n",
        "\n",
        "class Rettangolo(FiguraGeometrica):\n",
        "    pass\n",
        "\n",
        "class Cerchio(FiguraGeometrica):\n",
        "    pass\n",
        "\n",
        "rettangolo = Rettangolo('rettangolo', 10, 5)\n",
        "cerchio = Cerchio('cerchio', 5, 10)\n",
        "\n",
        "print(\"Area rettangolo:\" , rettangolo.Area())\n",
        "print(\"Perimetro rettangolo:\" , rettangolo.Perimetro())\n",
        "\n",
        "print(\"Area cerchio:\" ,cerchio.Area())\n",
        "print(\"Perimetro cerhio:\" , cerchio.Perimetro())"
      ],
      "metadata": {
        "id": "WuElk8En4RGj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Rettangolo:\n",
        "  def __init__(self, l1,l2):\n",
        "    self.l1 = l1\n",
        "    self.l2 = l2\n",
        "\n",
        "  def Area(self):\n",
        "    return self.l1 * self.l2\n",
        "\n",
        "  def Perimetro(self):\n",
        "    return self.l1 * 2 + self.l2 * 2\n",
        "\n",
        "class Quadrato(Rettangolo):\n",
        "  def __init__(self,lato):\n",
        "    Rettangolo.__init__(self,lato,lato)\n",
        "\n",
        "rettangolo = Rettangolo(10,5)\n",
        "print(\"Area rettangolo:\", rettangolo.Area())\n",
        "print(\"Perimetro rettangolo:\" , rettangolo.Perimetro())\n",
        "\n",
        "quadrato = Quadrato(5)\n",
        "print(\"Area quadrato:\", quadrato.Area())\n",
        "print(\"Perimetro quadrato:\", quadrato.Perimetro())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XRtgvhlK4W0L",
        "outputId": "69c5be6c-a997-42a0-f297-879c11088039"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area rettangolo: 50\n",
            "Perimetro rettangolo: 30\n",
            "Area quadrato: 25\n",
            "Perimetro quadrato: 20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Esercizio\n"
      ],
      "metadata": {
        "id": "KjBLu5NmpqB7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Auto:\n",
        "  def __init__(self, velocita_max ,velocita_att ):\n",
        "    self.velocita_max = velocita_max\n",
        "    self.velocita_att = velocita_att\n",
        "\n",
        "\n",
        "  def accelerazione(self, x = 10):\n",
        "    if self.velocita_att + x >  self.velocita_max:\n",
        "      self.velocita_att = self.velocita_max\n",
        "    else:\n",
        "      self.velocita_att= self.velocita_att + x\n",
        "    return self.velocita_att\n",
        "\n",
        "\n",
        "class AutoElettrica(Auto):\n",
        "  def accelerazione(self, x = 15):\n",
        "    return super().accelerazione(x)\n",
        "\n",
        "\n",
        "bmw = Auto(280,0)\n",
        "tesla = AutoElettrica(280,0)\n",
        "\n"
      ],
      "metadata": {
        "id": "hp9iEiA-psh7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(bmw.accelerazione())\n",
        "print(tesla.accelerazione())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ljDJOhx15UH",
        "outputId": "72a8fb0f-9e28-44e5-dc77-be1b62b8e3f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20\n",
            "30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "definire tre classi in python, persona, lavoratore, studente, le ultime due classi elencate sono due classi derivate dalla classe persona, gli attributi sono, nome, indirizzo ed età, studente voto, lavoratore stipendio, caratteristiche persona"
      ],
      "metadata": {
        "id": "_8aQuJCF5-PM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Persona: \n",
        "  def __init__(self, nome, indirizzo, eta):\n",
        "    self.nome = nome\n",
        "    self.indirizzo = indirizzo \n",
        "    self.eta = eta \n",
        "\n",
        "  def dettagli(self, dettaglio = ''):\n",
        "    if dettaglio == '':\n",
        "      return self.nome, self.indirizzo, self.eta\n",
        "    else: \n",
        "      return  self.nome, self.indirizzo, self.eta, dettaglio\n",
        "\n",
        "class Studente(Persona):\n",
        "  def dettagli(self, dettaglio):\n",
        "    return super().dettagli(dettaglio)\n",
        "\n",
        "class Lavoratore(Persona):\n",
        "  def dettagli(self, dettaglio ):\n",
        "    return super().dettagli(dettaglio)\n",
        "\n",
        "persona = Persona('Giuseppe', 'Via Garibaldi', 15)\n",
        "matteo = Studente('Matteo', 'Via Verga', 17)\n",
        "piero = Lavoratore('Piero', 'Via Marconi', 25)"
      ],
      "metadata": {
        "id": "mUhlwAzX6gzp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(persona.dettagli())\n",
        "print(matteo.dettagli(8))\n",
        "print(piero.dettagli(2000))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tJKlrIea7yC1",
        "outputId": "c99555bd-e6a4-4532-d1d5-169743f5d2ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('Giuseppe', 'Via Garibaldi', 15)\n",
            "('Matteo', 'Via Verga', 17, 8)\n",
            "('Piero', 'Via Marconi', 25, 2000)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Persona: \n",
        "  def __init__(self, nome, indirizzo, eta, dettaglio = ''):\n",
        "    self.nome = nome\n",
        "    self.indirizzo = indirizzo \n",
        "    self.eta = eta \n",
        "    self.dettaglio = dettaglio\n",
        "\n",
        "  def dettagli(self):\n",
        "    if self.dettaglio == '':\n",
        "      return self.nome, self.indirizzo, self.eta\n",
        "    else: \n",
        "      return  self.nome, self.indirizzo, self.eta, self.dettaglio\n",
        "\n",
        "class Studente(Persona):\n",
        "  pass\n",
        "\n",
        "class Lavoratore(Persona):\n",
        "  pass\n",
        "\n",
        "persona = Persona('Giuseppe', 'Via Garibaldi', 15)\n",
        "matteo = Studente('Matteo', 'Via Verga', 17, 8)\n",
        "piero = Lavoratore('Piero', 'Via Marconi', 25, 2000)"
      ],
      "metadata": {
        "id": "G-2E0DdJ9FHf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(persona.dettagli())\n",
        "print(matteo.dettagli())\n",
        "print(piero.dettagli())"
      ],
      "metadata": {
        "id": "O4QCd6iy98EF",
        "outputId": "ffe6692d-86f3-40f9-b7af-038b820d81bb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('Giuseppe', 'Via Garibaldi', 15)\n",
            "('Matteo', 'Via Verga', 17, 8)\n",
            "('Piero', 'Via Marconi', 25, 2000)\n"
          ]
        }
      ]
    }
  ]
}